{"version":3,"sources":["Components/Header/HeaderComponent.jsx","redux/SearchReposByTitle/search-repos-by-title-types.js","redux/SearchReposByTitle/search-repos-by-title-action.js","redux/favourite-repos/favourite-repos-type.jsx","redux/favourite-repos/add-favourite-repos-action.js","redux/favourite-repos/remove-favourite-repos-action.js","redux/change-header-dropdown/change-header-dropdown-types.js","redux/change-header-dropdown/change-header-dropdown-action.js","redux/fetch-data-from-git/fetch-data-from-git-types.js","redux/fetch-data-from-git/fetch-data-from-git-action.js","redux/main-content-view/main-content-view-types.js","redux/main-content-view/enable-main-content-view-action.js","redux/main-content-view/disable-main-content-view-action.js","redux/get-name-of-git-user/get-name-of-git-user-types.js","redux/get-name-of-git-user/get-name-of-git-user-action.js","Components/Header/HeaderContainer.jsx","Components/Repository/RepositoryComponent.jsx","Components/Repository/RepositoryContainer.jsx","Components/contributors/ContributorsComponent.jsx","Components/contributors/ContributorsContainer.jsx","Components/ListOfRepos/ListOfReposComponent.jsx","Components/ListOfRepos/ListOfReposContainer.jsx","Components/WelcomeScreen/WelcomeScreen.jsx","Components/WelcomeScreen/WelcomeScreenContainer.jsx","App.js","reportWebVitals.js","redux/SearchReposByTitle/search-repos-by-title-reducer.js","redux/favourite-repos/favourite-repos-reducer.js","redux/change-header-dropdown/change-header-dropdown-reducer.js","redux/fetch-data-from-git/fetch-data-from-git-reducer.js","redux/main-content-view/main-content-view-reducer.js","redux/get-name-of-git-user/get-name-of-git-user-reducer.js","redux/reducers.js","redux/store.js","index.js"],"names":["HeaderComponent","props","toggle","setState","isOpen","state","changeHeaderDropDown","event","target","className","searchRepoByTitle","searchReposByTitleAction","value","headerDropdownValue","titleSearchKeyWord","bind","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","InputGroup","Input","placeholder","onChange","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","updatedDropDown","DropdownMenu","right","DropdownItem","NavbarText","userName","Component","SEARCH_REPO_BY_TITLE","searchKey","type","payload","ADD_TO_FAVOURITE_REPOS","REMOVE_FROM_FAVOURITE_REPOS","addFavouriteRepos","repoDetails","removeFavouriteRepos","UPDATE_DROP_DOWN","dropDownSelected","GET_DATA_FROM_GIT","GET_DATA_FROM_GIT_ERROR","getDataFromGit","dispatch","axios","get","then","response","data","catch","err","ENABLE_MAIN_CONTENT","DISABLE_MAIN_CONTENT","enableMainContent","repoData","disableMainContent","GET_USER_NAME_OF_GIT_USER","getUserNameAction","connect","searchKeyEntered","searchReposByTitleReducer","updateDropDownReducer","getUserNameReducer","bindActionCreators","RepositoryComponent","handleClick","addOrRemove","name","description","addedToFav","Col","md","Card","CardBody","CardTitle","CardText","ButtonGroup","Button","favouriteRepos","favouriteReposReducer","ContributorsComponent","dataOfARepo","Container","full_name","toUpperCase","CardImg","top","width","src","owner","avatar_url","alt","Row","CardHeader","default_branch","created_at","clone_url","watchers","forks","updated_at","ssh_url","license","mainContentViewReducer","ListOfReposComponent","repositoryData","dataToShow","dataProcessedToDisplay","fluid","display","ContributorsContainer","length","map","val","ind","RepositoryContainer","index","filter","toLowerCase","includes","dataFromGit","enteredKey","allOrFavs","WelcomeScreen","handleChange","handleSubmit","process","App","dataRetrieved","HeaderContainer","ListOfReposContainer","WelcomeScreenContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","filterFavs","arrayData","initialData","combineReducers","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.84426e72.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    NavbarText,\r\n    InputGroup,\r\n    Input\r\n} from 'reactstrap';\r\nimport './HeaderComponent.css';\r\n\r\nclass HeaderComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isOpen: false,\r\n            headerDropdownValue: 'All',\r\n            titleSearchKeyWord: ''\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n        this.changeHeaderDropDown = this.changeHeaderDropDown.bind(this);\r\n        this.searchRepoByTitle = this.searchRepoByTitle.bind(this);\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    }\r\n\r\n    changeHeaderDropDown = (event) => {\r\n        /*this.setState({\r\n            headerDropdownValue: event.target.className\r\n        })*/\r\n        this.props.changeHeaderDropDown(event.target.className);\r\n    }\r\n\r\n    searchRepoByTitle = (event) => {\r\n        this.props.searchReposByTitleAction(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"light\" light expand=\"md\">\r\n                    <NavbarBrand href=\"/\">GitHub</NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className=\"mr-auto\" navbar>\r\n                            <InputGroup>\r\n                                <Input\r\n                                    className='searchBox'\r\n                                    placeholder='Search repos by title'\r\n                                    onChange={this.searchRepoByTitle}\r\n                                />\r\n                            </InputGroup>\r\n                            <UncontrolledDropdown nav inNavbar>\r\n                                <DropdownToggle nav caret>\r\n                                    {this.props.updatedDropDown}\r\n                                </DropdownToggle>\r\n                                <DropdownMenu right>\r\n                                    <DropdownItem>\r\n                                        <div onClick={this.changeHeaderDropDown} className='All'>All</div>\r\n                                    </DropdownItem>\r\n                                    <DropdownItem>\r\n                                        <div onClick={this.changeHeaderDropDown} className='Favourites'>Favourites</div>\r\n                                    </DropdownItem>\r\n                                </DropdownMenu>\r\n                            </UncontrolledDropdown>\r\n                        </Nav>\r\n                        <NavbarText>{this.props.userName}</NavbarText>\r\n                    </Collapse>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default HeaderComponent;\r\n","export const SEARCH_REPO_BY_TITLE = 'SEARCH_REPO_BY_TITLE';\r\n","import {SEARCH_REPO_BY_TITLE} from './search-repos-by-title-types';\r\n\r\nexport const searchReposByTitleAction = (searchKey) => {\r\n    return {\r\n        type: SEARCH_REPO_BY_TITLE,\r\n        payload: {\r\n            searchKey: searchKey\r\n        }\r\n    }\r\n}\r\n","export const ADD_TO_FAVOURITE_REPOS = 'ADD_TO_FAVOURITE_REPOS';\r\nexport const REMOVE_FROM_FAVOURITE_REPOS = 'REMOVE_FROM_FAVOURITE_REPOS';\r\n","import {ADD_TO_FAVOURITE_REPOS} from \"./favourite-repos-type\";\r\n\r\nexport const addFavouriteRepos = (repoDetails) => {\r\n    return {\r\n        type: ADD_TO_FAVOURITE_REPOS,\r\n        payload: {\r\n            repoDetails\r\n        }\r\n    }\r\n}\r\n","import {REMOVE_FROM_FAVOURITE_REPOS} from \"./favourite-repos-type\";\r\n\r\nexport const removeFavouriteRepos = (repoDetails) => {\r\n    return {\r\n        type: REMOVE_FROM_FAVOURITE_REPOS,\r\n        payload: {\r\n            repoDetails\r\n        }\r\n    }\r\n}\r\n","export const UPDATE_DROP_DOWN = 'UPDATE_DROP_DOWN';\r\n","import {UPDATE_DROP_DOWN} from \"./change-header-dropdown-types\";\r\n\r\nexport const changeHeaderDropDown = (dropDownSelected) => {\r\n    return {\r\n        type: UPDATE_DROP_DOWN,\r\n        payload: {\r\n            dropDownSelected\r\n        }\r\n    }\r\n}\r\n","export const GET_DATA_FROM_GIT = 'GET_DATA_FROM_GIT';\r\nexport const GET_DATA_FROM_GIT_ERROR = 'GET_DATA_FROM_GIT_ERROR';\r\n","import {GET_DATA_FROM_GIT, GET_DATA_FROM_GIT_ERROR} from \"./fetch-data-from-git-types\";\r\nimport axios from 'axios';\r\nexport const getDataFromGit = (userName) => {\r\n    return dispatch => {\r\n        axios.get(`https://api.github.com/users/${userName}/repos`)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: GET_DATA_FROM_GIT,\r\n                    payload: response.data\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: GET_DATA_FROM_GIT_ERROR,\r\n                    payload: err\r\n                })\r\n            })\r\n    }\r\n}\r\n","export const ENABLE_MAIN_CONTENT = 'ENABLE_MAIN_CONTENT';\r\nexport const DISABLE_MAIN_CONTENT = 'DISABLE_MAIN_CONTENT';\r\n","import {ENABLE_MAIN_CONTENT} from \"./main-content-view-types\";\r\n\r\nexport const enableMainContent = repoData => {\r\n    return {\r\n        type: ENABLE_MAIN_CONTENT,\r\n        payload: repoData\r\n    }\r\n}\r\n","import {DISABLE_MAIN_CONTENT} from \"./main-content-view-types\";\r\n\r\nexport const disableMainContent = () => {\r\n    return {\r\n        type: DISABLE_MAIN_CONTENT\r\n    }\r\n}\r\n","export const GET_USER_NAME_OF_GIT_USER = 'GET_USER_NAME_OF_GIT_USER';\r\n","import {GET_USER_NAME_OF_GIT_USER} from \"./get-name-of-git-user-types\";\r\n\r\nexport const getUserNameAction = (userName) => {\r\n    return {\r\n        type: GET_USER_NAME_OF_GIT_USER,\r\n        payload: {\r\n            userName\r\n        }\r\n    }\r\n}\r\n","import HeaderComponent from \"./HeaderComponent\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    changeHeaderDropDown,\r\n    searchReposByTitleAction\r\n} from '../../redux/actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchKeyEntered: state.searchReposByTitleReducer,\r\n        updatedDropDown: state.updateDropDownReducer,\r\n        userName: state.getUserNameReducer.userName\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        changeHeaderDropDown,\r\n        searchReposByTitleAction\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderComponent);\r\n","import React, {Component} from 'react';\r\nimport {\r\n    Card,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    Button,\r\n    Col,\r\n    ButtonGroup\r\n} from 'reactstrap';\r\nimport './RepositoryComponent.css';\r\n\r\nclass RepositoryComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        let addOrRemove = event.target.name;\r\n        if (addOrRemove === 'add') {\r\n            this.props.addFavouriteRepos(this.props.repoData);\r\n        } else if (addOrRemove === 'remove') {\r\n            this.props.removeFavouriteRepos(this.props.repoData);\r\n        } else {\r\n            this.props.enableMainContent(this.props.repoData);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {name, description, addedToFav} = this.props.repoData;\r\n        return(\r\n            <Col md={4}>\r\n                <Card className='cardBox'>\r\n                    {/*<CardImg top width=\"100%\" src=\"/assets/318x180.svg\" alt=\"Card image cap\" />*/}\r\n                    <CardBody>\r\n                        <CardTitle>{name}</CardTitle>\r\n                        {/*<CardSubtitle>Card subtitle</CardSubtitle>*/}\r\n                        <CardText>{description? description : 'No description available for this repo.'}</CardText>\r\n                        <ButtonGroup>\r\n                            <Button\r\n                                color='primary'\r\n                                onClick={this.handleClick}\r\n                            >\r\n                                Open\r\n                            </Button>\r\n                            <Button\r\n                                color={addedToFav ? 'danger' : 'success'}\r\n                                onClick={this.handleClick}\r\n                                name={addedToFav ? 'remove' : 'add'}\r\n                            >\r\n                                {addedToFav ? 'Remove from favourites' : 'Add to favourites'}\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RepositoryComponent;\r\n","import RepositoryComponent from \"./RepositoryComponent\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {connect} from 'react-redux';\r\nimport {addFavouriteRepos, removeFavouriteRepos,enableMainContent, disableMainContent} from '../../redux/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        favouriteRepos: state.favouriteReposReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        addFavouriteRepos,\r\n        removeFavouriteRepos,\r\n        enableMainContent,\r\n        disableMainContent\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RepositoryComponent);\r\n","import React, {Component} from 'react';\r\n// import { Row } from 'reactstrap';\r\n\r\nimport {\r\n    Card,\r\n    CardImg,\r\n    CardText,\r\n    CardBody,\r\n    CardTitle,\r\n    Button,\r\n    Row,\r\n    Container,\r\n    Col,\r\n    CardHeader\r\n} from 'reactstrap';\r\nimport './ContributorsComponent.css';\r\n\r\nclass ContributorsComponent extends Component {\r\n    render() {\r\n        const {dataOfARepo} = this.props;\r\n        return(\r\n            <Container className='contributorsComponent'>\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle className='contributorCardTitle'>{dataOfARepo.full_name.toUpperCase()}</CardTitle>\r\n                        <CardImg top className='avatarImage' width=\"100%\" src={dataOfARepo.owner.avatar_url} alt=\"Card image cap\" />\r\n                        <Row className='contributorCardRow'>\r\n                            <Col>\r\n                                <CardHeader>Repo Name</CardHeader>\r\n                                <CardText>{dataOfARepo.name}</CardText>\r\n                                <CardHeader>Default branch</CardHeader>\r\n                                <CardText>{dataOfARepo.default_branch}</CardText>\r\n                                <CardHeader>Created at</CardHeader>\r\n                                <CardText>{dataOfARepo.created_at}</CardText>\r\n                                <CardHeader>Clone url</CardHeader>\r\n                                <CardText>{dataOfARepo.clone_url}</CardText>\r\n                                <CardHeader>No of watchers</CardHeader>\r\n                                <CardText>{dataOfARepo.watchers}</CardText>\r\n                            </Col>\r\n                            <Col>\r\n                                <CardHeader>Description</CardHeader>\r\n                                <CardText>{dataOfARepo.description}</CardText>\r\n                                <CardHeader>No of forks</CardHeader>\r\n                                <CardText>{dataOfARepo.forks}</CardText>\r\n                                <CardHeader>Updated at</CardHeader>\r\n                                <CardText>{dataOfARepo.updated_at}</CardText>\r\n                                <CardHeader>SSH</CardHeader>\r\n                                <CardText>{dataOfARepo.ssh_url}</CardText>\r\n                                <CardHeader>License</CardHeader>\r\n                                <CardText>{dataOfARepo.license? dataOfARepo.license.name : 'Not Available'}</CardText>\r\n                            </Col>\r\n                        </Row>\r\n                        <Button color='success' onClick={this.props.disableMainContent}>Back</Button>\r\n                    </CardBody>\r\n                </Card>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContributorsComponent;\r\n","import ContributorsComponent from \"./ContributorsComponent\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    disableMainContent\r\n} from '../../redux/actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dataOfARepo: state.mainContentViewReducer.data\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        disableMainContent\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContributorsComponent);\r\n","import React, {Component} from 'react';\r\nimport { Container, Row } from 'reactstrap';\r\nimport './ListOfReposComponent.css';\r\nimport RepositoryContainer from \"../Repository/RepositoryContainer\";\r\nimport ContributorsContainer from \"../contributors/ContributorsContainer\";\r\n\r\nclass ListOfReposComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            repositoryData: null,\r\n            dataToShow: null\r\n        }\r\n    }\r\n    static getDerivedStateFromProps(props,state) {\r\n        if (props.searchKeyEntered.searchKey && state.repositoryData) {\r\n            state.dataToShow = state.repositoryData.filter(val => val.name.toLowerCase()\r\n                .includes(props.searchKeyEntered.searchKey.toLowerCase()))\r\n        }\r\n        return state;\r\n    }\r\n\r\n    render() {\r\n        let { dataProcessedToDisplay, mainContentViewReducer } = this.props;\r\n        return(\r\n            <Container className='containerClass' fluid={true}>\r\n                {!mainContentViewReducer.display ?\r\n                    <Row>\r\n                        {\r\n                            dataProcessedToDisplay !== null ?\r\n                                dataProcessedToDisplay.length > 0 ?\r\n                                dataProcessedToDisplay.map((val, ind) => <RepositoryContainer\r\n                                    key={ind}\r\n                                    repoData={val}\r\n                                    index={ind}\r\n                                />) :\r\n                                    <div>No data is available in this section</div>\r\n                                :\r\n                                null\r\n                        }\r\n                    </Row>:\r\n                    <ContributorsContainer/>\r\n                }\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListOfReposComponent;\r\n","import ListOfReposComponent from \"./ListOfReposComponent\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {connect} from 'react-redux';\r\nimport {getDataFromGit} from '../../redux/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    let dataFromGit = state.dataFromGit;\r\n    let enteredKey = state.searchReposByTitleReducer;\r\n    let favouriteRepos = state.favouriteReposReducer;\r\n    let allOrFavs = state.updateDropDownReducer;\r\n    let dataProcessedToDisplay = null;\r\n    if (allOrFavs === 'All') {\r\n        if (enteredKey.searchKey && dataFromGit) {\r\n            dataProcessedToDisplay = dataFromGit.filter(val => val.name.toLowerCase()\r\n                .includes(enteredKey.searchKey.toLowerCase()))\r\n        } else {\r\n            dataProcessedToDisplay = dataFromGit;\r\n        }\r\n    } else if (allOrFavs === 'Favourites') {\r\n        dataProcessedToDisplay = favouriteRepos;\r\n    }\r\n    return {\r\n        searchKeyEntered: state.searchReposByTitleReducer,\r\n        favouriteRepos: state.favouriteReposReducer,\r\n        updatedDropDown: state.updateDropDownReducer,\r\n        userName: state.getUserNameReducer,\r\n        dataProcessedToDisplay,\r\n        mainContentViewReducer: state.mainContentViewReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        getDataFromGit\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListOfReposComponent);\r\n","import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, InputGroup, Input } from 'reactstrap';\r\nimport './WelcomeScreen.css';\r\nimport {getUserNameAction} from \"../../redux/get-name-of-git-user/get-name-of-git-user-action\";\r\n\r\nclass WelcomeScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            userName: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        this.props.getDataFromGit(this.state.userName);\r\n        this.props.getUserNameAction(this.state.userName);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='container-fluid welcomeScreen'>\r\n                <div className='row'>\r\n                    <div className='col-md-6 leftWelcome'>\r\n                        <img\r\n                            src={process.env.PUBLIC_URL + '/git_icon.png'}\r\n                            className=\"rounded welcomeImage\"\r\n                            alt=\"Git Hub\"\r\n                        />\r\n                    </div>\r\n                    <div className='col-md-6 rightWelcome'>\r\n                        <p className='display-1 marginSet'>Welcome</p>\r\n                        <InputGroup>\r\n                            <Input\r\n                                className='my-5 w-25'\r\n                                placeholder=\"please enter git username\"\r\n                                onChange={this.handleChange}\r\n                            />\r\n                        </InputGroup>\r\n                        <Button color='danger' onClick={this.handleSubmit}>Show Repos</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default WelcomeScreen;\r\n","import WelcomeScreen from \"./WelcomeScreen\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {connect} from 'react-redux';\r\nimport {getDataFromGit, getUserNameAction, searchReposByTitleAction} from '../../redux/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        searchReposByTitleAction,\r\n        getUserNameAction,\r\n        getDataFromGit\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WelcomeScreen);\r\n","import './App.css';\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport ListOfReposContainer from \"./Components/ListOfRepos/ListOfReposContainer\";\nimport React, {Component, Fragment} from \"react\";\nimport WelcomeScreenContainer from \"./Components/WelcomeScreen/WelcomeScreenContainer\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from 'react-redux';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                {this.props.dataRetrieved.length > 0 ?\n                    <Fragment>\n                        <HeaderContainer/>\n                        <ListOfReposContainer/>\n                    </Fragment>\n                    :\n                    <WelcomeScreenContainer/>\n                }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        dataRetrieved: state.dataFromGit\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {SEARCH_REPO_BY_TITLE} from './search-repos-by-title-types';\r\n\r\nlet initialState = {};\r\nconst searchReposByTitleReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SEARCH_REPO_BY_TITLE: {\r\n            return {...state, searchKey: action.payload.searchKey}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport default searchReposByTitleReducer;\r\n","import {ADD_TO_FAVOURITE_REPOS, REMOVE_FROM_FAVOURITE_REPOS} from \"./favourite-repos-type\";\r\n\r\nconst initialState = [];\r\nconst favouriteReposReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TO_FAVOURITE_REPOS: {\r\n            let filterFavs = state.filter(val => val.name === action.payload.repoDetails.name);\r\n            if (filterFavs.length === 0) {\r\n                action.payload.repoDetails.addedToFav = true;\r\n                return [...state, action.payload.repoDetails]\r\n            } else {\r\n                return state\r\n            }\r\n        }\r\n        case REMOVE_FROM_FAVOURITE_REPOS: {\r\n            let arrayData =  state.map(val => {\r\n                if (val.name === action.payload.repoDetails.name && val.addedToFav === true) {\r\n                    val.addedToFav = false;\r\n                    return val;\r\n                } else {\r\n                    return val\r\n                }\r\n            });\r\n            return arrayData.filter(val => val.name !== action.payload.repoDetails.name);\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default favouriteReposReducer;\r\n","import {UPDATE_DROP_DOWN} from \"./change-header-dropdown-types\";\r\nconst initialState = 'All';\r\nconst updateDropDownReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_DROP_DOWN: {\r\n            return action.payload.dropDownSelected\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default updateDropDownReducer;\r\n","import {GET_DATA_FROM_GIT, GET_DATA_FROM_GIT_ERROR} from \"./fetch-data-from-git-types\";\r\n\r\nconst initialData = [];\r\nconst dataFromGit = (state = initialData, action) => {\r\n    switch (action.type) {\r\n        case GET_DATA_FROM_GIT: {\r\n            return action.payload\r\n        }\r\n        case GET_DATA_FROM_GIT_ERROR: {\r\n            return action.payload\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default dataFromGit;\r\n","import {ENABLE_MAIN_CONTENT,DISABLE_MAIN_CONTENT} from \"./main-content-view-types\";\r\n\r\nlet initialState = {data:'', display: false};\r\nconst mainContentViewReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ENABLE_MAIN_CONTENT: {\r\n            return {...state, data:action.payload, display: true};\r\n        }\r\n        case DISABLE_MAIN_CONTENT: {\r\n            return {...state, data:'', display: false};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default mainContentViewReducer;\r\n","import {GET_USER_NAME_OF_GIT_USER} from \"./get-name-of-git-user-types\";\r\n\r\nlet initialState = null;\r\nconst getUserNameReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_USER_NAME_OF_GIT_USER:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default getUserNameReducer;\r\n","import {combineReducers} from \"redux\";\r\nimport searchReposByTitleReducer from \"./SearchReposByTitle/search-repos-by-title-reducer\";\r\nimport favouriteReposReducer from './favourite-repos/favourite-repos-reducer';\r\nimport updateDropDownReducer from './change-header-dropdown/change-header-dropdown-reducer';\r\nimport dataFromGit from './fetch-data-from-git/fetch-data-from-git-reducer';\r\nimport mainContentViewReducer from './main-content-view/main-content-view-reducer';\r\nimport getUserNameReducer from \"./get-name-of-git-user/get-name-of-git-user-reducer\";\r\nexport default combineReducers({\r\n    searchReposByTitleReducer,\r\n    favouriteReposReducer,\r\n    updateDropDownReducer,\r\n    dataFromGit,\r\n    mainContentViewReducer,\r\n    getUserNameReducer\r\n})\r\n","import {applyMiddleware, createStore} from \"redux\";\r\nimport rootReducer from './reducers';\r\nimport thunk from \"redux-thunk\";\r\nexport default createStore(rootReducer, applyMiddleware(thunk));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}